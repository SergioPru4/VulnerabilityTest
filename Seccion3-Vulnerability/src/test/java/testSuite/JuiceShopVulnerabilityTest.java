package testSuite;

import io.qameta.allure.*;
import io.restassured.response.Response;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import static io.qameta.allure.SeverityLevel.CRITICAL;
import static io.restassured.RestAssured.given;

public class JuiceShopVulnerabilityTest {

    //allure serve build/allure-results

    String host = "http://localhost:9292/";
    Response response;
    String scanId;
    
    @Test
    @Order(2)
    @DisplayName("Test de vulnerabilidades")
    @Description("En este test se encuantra el codigo para ejecutar el escaneo de vulnerabilidades en la aplicacion Juice Shop")
    @Severity(CRITICAL)
    @Owner("Sergio Ivan Prudencio Flores")
    @Link(name = "Website", url = "www.sergiopru.com")
    @Issue("WARNING-1")
    @TmsLink("T-1")
    @Feature("Scanner")
    @Story("Story 1")
    @Epic("Epic 1")
    public void scannerVulnerabilityTest() throws InterruptedException {
        startScan();
        waitScanIsCompleted();
    }
    @Step("1) Seleciona el host e inica el escaneo")
    private void startScan() {
        response = given().
            queryParam("url", "http://demo.owasp-juice.shop").
            log().all()
            .when()
            .get(host + "JSON/ascan/action/scan/");
        response.then().log().all();
        scanId = response.then().extract().path("scan");
        System.out.println("Scan ID: " + scanId);
    }

    @Step("2) Se espera a que el progreso este al 100%")
    private void waitScanIsCompleted() throws InterruptedException {
        String state = "0";
        do {
            Thread.sleep(5000);
            response = given().
                    queryParam("scanId", scanId).
                    log().all()
                    .when()
                    .get(host + "JSON/ascan/view/status/");

            response.then().log().all();
            state = response.then().extract().path("status");
        } while (!state.equals("100"));
    }

    @AfterEach
    public void generateReport() {
        response = given().
                queryParam("scanId", scanId).
                log().all()
                .when()
                .get(host + "HTML/ascan/view/scanProgress/");

        response.then().log().all();
        attachReport("List of Vulnerabilities", response.getBody().asString());

        response= given().
                log().all()
                .when()
                .get(host + "OTHER/core/other/htmlreport/");

        response.then().log().all();
        attachReport("Report", response.getBody().asString());
    }

    @Attachment(value = "{0}", type = "text/html")
    public String attachReport(String name, String content) {
        return content;
    }
}
